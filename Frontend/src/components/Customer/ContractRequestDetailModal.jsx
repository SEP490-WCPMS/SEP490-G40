import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './ContractRequestDetailModal.css';

const ContractRequestDetailModal = ({ isOpen, contractId, accountId, token, onClose }) => {
    const [detail, setDetail] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');

    const fetchDetailData = async () => {
        setLoading(true);
        setError('');
        try {
            const response = await axios.get(
                `http://localhost:8080/api/contract-request/${contractId}/details/${accountId}`,
                {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                }
            );
            setDetail(response.data);
        } catch (err) {
            setError('Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt h·ª£p ƒë·ªìng. Vui l√≤ng th·ª≠ l·∫°i.');
            console.error('Error fetching contract details:', err);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        if (isOpen && contractId && accountId) {
            fetchDetailData();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [isOpen, contractId, accountId]);

    const formatDate = (dateString) => {
        if (!dateString) return 'N/A';
        return new Date(dateString).toLocaleDateString('vi-VN');
    };

    const getStatusBadge = (status) => {
        switch (status) {
            case 'PENDING':
            case 'DRAFT':
            case 'PENDING_SURVEY_REVIEW':
                return { text: 'ƒêang x·ª≠ l√Ω', className: 'status-processing' };
            case 'APPROVED':
            case 'ACTIVE':
                return { text: 'ƒê√£ ch·∫•p thu·∫≠n', className: 'status-approved' };
            case 'TERMINATED':
            case 'SUSPENDED':
                return { text: 'ƒê√£ t·ª´ ch·ªëi/H·ªßy', className: 'status-rejected' };
            case 'EXPIRED':
                return { text: 'ƒê√£ h·∫øt h·∫°n', className: 'status-expired' };
            default:
                return { text: status, className: 'status-default' };
        }
    };

    if (!isOpen) return null;

    return (
        <div className="modal-overlay" onClick={onClose}>
            <div className="modal-content" onClick={(e) => e.stopPropagation()}>
                <div className="modal-header">
                    <h2>Chi ti·∫øt Y√™u c·∫ßu H·ª£p ƒë·ªìng</h2>
                    <button className="close-btn" onClick={onClose}>&times;</button>
                </div>

                <div className="modal-body">
                    {loading && (
                        <div className="loading-state">
                            <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
                        </div>
                    )}

                    {error && (
                        <div className="error-state">
                            <p className="error-message">{error}</p>
                            <button className="retry-btn" onClick={fetchDetailData}>
                                Th·ª≠ l·∫°i
                            </button>
                        </div>
                    )}

                    {!loading && !error && detail && (
                        <>
                            {/* Th√¥ng tin h·ª£p ƒë·ªìng c∆° b·∫£n */}
                            <div className="detail-section">
                                <h3 className="section-title">üìã Th√¥ng tin h·ª£p ƒë·ªìng</h3>
                                <div className="detail-grid">
                                    <div className="detail-row">
                                        <label>S·ªë h·ª£p ƒë·ªìng:</label>
                                        <span className="detail-value">{detail.contractNumber || 'N/A'}</span>
                                    </div>
                                    <div className="detail-row">
                                        <label>Tr·∫°ng th√°i:</label>
                                        <span className={`status-badge ${getStatusBadge(detail.status).className}`}>
                                            {getStatusBadge(detail.status).text}
                                        </span>
                                    </div>
                                    <div className="detail-row">
                                        <label>Ng√†y g·ª≠i y√™u c·∫ßu:</label>
                                        <span className="detail-value">{formatDate(detail.applicationDate)}</span>
                                    </div>
                                    <div className="detail-row full-width">
                                        <label>Ghi ch√∫:</label>
                                        <span className="detail-value">{detail.notes || '(Kh√¥ng c√≥)'}</span>
                                    </div>
                                </div>
                            </div>

                            {/* Th√¥ng tin kh√°ch h√†ng */}
                            <div className="detail-section">
                                <h3 className="section-title">üë§ Th√¥ng tin kh√°ch h√†ng</h3>
                                <div className="detail-grid">
                                    <div className="detail-row">
                                        <label>T√™n kh√°ch h√†ng:</label>
                                        <span className="detail-value">{detail.customerName || 'N/A'}</span>
                                    </div>
                                    <div className="detail-row">
                                        <label>M√£ kh√°ch h√†ng:</label>
                                        <span className="detail-value">{detail.customerCode || 'N/A'}</span>
                                    </div>
                                    <div className="detail-row full-width">
                                        <label>ƒê·ªãa ch·ªâ:</label>
                                        <span className="detail-value">{detail.address || 'N/A'}</span>
                                    </div>
                                    {detail.contactPersonName && (
                                        <div className="detail-row">
                                            <label>Ng∆∞·ªùi li√™n h·ªá:</label>
                                            <span className="detail-value">{detail.contactPersonName}</span>
                                        </div>
                                    )}
                                    {detail.contactPersonPhone && (
                                        <div className="detail-row">
                                            <label>S·ªë ƒëi·ªán tho·∫°i:</label>
                                            <span className="detail-value">{detail.contactPersonPhone}</span>
                                        </div>
                                    )}
                                    {detail.identityNumber && (
                                        <div className="detail-row">
                                            <label>S·ªë CMND/CCCD:</label>
                                            <span className="detail-value">{detail.identityNumber}</span>
                                        </div>
                                    )}
                                </div>
                            </div>

                            {/* Th√¥ng tin lo·∫°i gi√° n∆∞·ªõc */}
                            <div className="detail-section">
                                <h3 className="section-title">üíß Th√¥ng tin lo·∫°i gi√° n∆∞·ªõc</h3>
                                <div className="detail-grid">
                                    <div className="detail-row">
                                        <label>Lo·∫°i gi√° n∆∞·ªõc:</label>
                                        <span className="detail-value">{detail.priceTypeName || 'N/A'}</span>
                                    </div>
                                    {detail.usagePurpose && (
                                        <div className="detail-row">
                                            <label>M·ª•c ƒë√≠ch s·ª≠ d·ª•ng:</label>
                                            <span className="detail-value">{detail.usagePurpose}</span>
                                        </div>
                                    )}
                                </div>
                            </div>

                            {/* Th√¥ng tin s·ª≠ d·ª•ng n∆∞·ªõc */}
                            <div className="detail-section">
                                <h3 className="section-title">üìä Th√¥ng tin s·ª≠ d·ª•ng n∆∞·ªõc</h3>
                                <div className="detail-grid">
                                    <div className="detail-row">
                                        <label>S·ªë ng∆∞·ªùi s·ª≠ d·ª•ng:</label>
                                        <span className="detail-value">{detail.occupants || 'N/A'} ng∆∞·ªùi</span>
                                    </div>
                                    <div className="detail-row">
                                        <label>Ph·∫ßn trƒÉm s·ª≠ d·ª•ng:</label>
                                        <span className="detail-value">
                                            {detail.usagePercentage ? `${detail.usagePercentage}%` : 'N/A'}
                                        </span>
                                    </div>
                                    <div className="detail-row">
                                        <label>L∆∞·ª£ng ti√™u th·ª• d·ª± t√≠nh (m¬≥/th√°ng):</label>
                                        <span className="detail-value">
                                            {detail.estimatedMonthlyConsumption ? `${detail.estimatedMonthlyConsumption} m¬≥` : 'N/A'}
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </>
                    )}
                </div>

                <div className="modal-footer">
                    <button className="close-modal-btn" onClick={onClose}>
                        ƒê√≥ng
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ContractRequestDetailModal;
