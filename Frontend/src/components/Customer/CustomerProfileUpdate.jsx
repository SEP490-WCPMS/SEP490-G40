import React, { useEffect, useState } from "react";
import axios from "axios"; // D√πng axios m·∫∑c ƒë·ªãnh
import './CustomerProfileUpdate.css';
import { useNavigate } from "react-router-dom";

const CustomerProfileUpdate = () => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [message, setMessage] = useState("");
  const navigate = useNavigate();

  useEffect(() => {
    const currentUser = JSON.parse(localStorage.getItem("user"));

    // --- S·ª¨A 1: ƒê·ªçc token t·ª´ ƒë√∫ng key ---
    const token = localStorage.getItem("token");

    // --- S·ª¨A 2: Ki·ªÉm tra c·∫£ user.id v√† token ---
    if (!currentUser || !currentUser.id || !token) {
      navigate("/login");
      return;
    }

    const fetchProfileData = async () => {
      try {
        // --- S·ª¨A 3: Th√™m Header Authorization v√†o request ---
        const response = await axios.get(`http://localhost:8080/api/profile/${currentUser.id}`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });

        setUser(response.data);
      } catch (error) {
        console.error("L·ªói: Kh√¥ng th·ªÉ t·∫£i h·ªì s∆° kh√°ch h√†ng:", error);
        setMessage("‚ùå Kh√¥ng th·ªÉ t·∫£i h·ªì s∆°.");
      } finally {
        setLoading(false);
      }
    };

    fetchProfileData();
  }, [navigate]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setUser((prevUser) => ({
      ...prevUser,
      [name]: value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!user.fullName || !user.email || !user.phone || !user.address || !user.street || !user.district || !user.province) {
      setMessage("‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ c√°c tr∆∞·ªùng th√¥ng tin.");
      return;
    }

    // L·∫•y l·∫°i token t·ª´ localStorage
    const token = localStorage.getItem("token");

    if (!token) {
      setMessage("‚ùå L·ªói x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
      return;
    }

    try {
      const updatedData = { ...user };

      // --- S·ª¨A 4: Th√™m Header Authorization v√†o request PUT ---
      // L∆∞u √Ω: D√πng user.id (v√¨ DTO c·ªßa back-end ƒë√£ ƒë·ªïi)
      const res = await axios.put(`http://localhost:8080/api/profile/update/${user.id}`, updatedData, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      setMessage("‚úÖ C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");

      // C·∫≠p nh·∫≠t l·∫°i localStorage v·ªõi th√¥ng tin M·ªöI NH·∫§T
      const currentUserData = JSON.parse(localStorage.getItem("user"));
      // G·ªôp th√¥ng tin user c≈© (id, roleName) v·ªõi th√¥ng tin m·ªõi (fullName, address...)
      const updatedUser = {
        ...currentUserData,
        ...res.data.user
      };
      localStorage.setItem("user", JSON.stringify(updatedUser));

    } catch (err) {
      setMessage("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
      console.error(err);
    }
  };

  // Hi·ªÉn th·ªã loading trong khi ch·ªù fetch
  if (loading) {
    return <div style={{ textAlign: 'center', padding: '50px' }}>ƒêang t·∫£i h·ªì s∆°...</div>;
  }

  // N·∫øu fetch xong m√† user v·∫´n null (v√≠ d·ª• API l·ªói)
  if (!user) {
    return <div style={{ textAlign: 'center', padding: '50px', color: 'red' }}>{message || "Kh√¥ng th·ªÉ t·∫£i h·ªì s∆°."}</div>;
  }

  // Giao di·ªán c·ªßa component
  return (
    <section className="profile-update-section">
      <div className="profile-container">
        {/* Header */}
        <div className="profile-header">
          <div className="profile-header-icon">üë§</div>
          <div className="profile-header-content">
            <h1>Ch·ªânh s·ª≠a h·ªì s∆° c√° nh√¢n</h1>
            <p>C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n c·ªßa b·∫°n</p>
          </div>
        </div>

        {/* Message Alert */}
        {message && (
          <div className={`profile-alert ${message.includes("‚ùå") ? 'alert-error' : 'alert-success'}`}>
            <span className="alert-icon">{message.includes("‚ùå") ? "‚ö†Ô∏è" : "‚úÖ"}</span>
            <span>{message.replace(/^[‚ùå‚úÖ]\s*/, '')}</span>
          </div>
        )}

        {/* Form */}
        <form onSubmit={handleSubmit} className="profile-form">
          {/* Section 1: Th√¥ng tin c√° nh√¢n */}
          <div className="form-section">
            <div className="section-title">
              <span className="section-icon">üë§</span>
              <h3>Th√¥ng tin c√° nh√¢n</h3>
            </div>
            <div className="form-grid">
              <div className="form-group">
                <label htmlFor="fullName">H·ªç v√† t√™n</label>
                <input
                  type="text"
                  id="fullName"
                  className="form-input"
                  name="fullName"
                  value={user.fullName}
                  onChange={handleChange}
                  placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß"
                  required
                />
              </div>
              <div className="form-group">
                <label htmlFor="email">Email</label>
                <input
                  type="email"
                  id="email"
                  className="form-input"
                  name="email"
                  value={user.email}
                  onChange={handleChange}
                  placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email"
                  required
                />
              </div>
              <div className="form-group">
                <label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i</label>
                <input
                  type="text"
                  id="phone"
                  className="form-input"
                  name="phone"
                  value={user.phone}
                  onChange={handleChange}
                  placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                  required
                />
              </div>
            </div>
          </div>

          {/* Section 2: ƒê·ªãa ch·ªâ */}
          <div className="form-section">
            <div className="section-title">
              <span className="section-icon">üìç</span>
              <h3>ƒê·ªãa ch·ªâ</h3>
            </div>
            <div className="form-grid">
              <div className="form-group full-width">
                <label htmlFor="address">ƒê·ªãa ch·ªâ</label>
                <input
                  type="text"
                  id="address"
                  className="form-input"
                  name="address"
                  value={user.address}
                  onChange={handleChange}
                  placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß"
                  required
                />
              </div>
              <div className="form-group full-width">
                <label htmlFor="street">ƒê∆∞·ªùng/Ph·ªë</label>
                <input
                  type="text"
                  id="street"
                  className="form-input"
                  name="street"
                  value={user.street}
                  onChange={handleChange}
                  placeholder="Nh·∫≠p t√™n ƒë∆∞·ªùng/ph·ªë"
                  required
                />
              </div>
              <div className="form-group">
                <label htmlFor="district">Qu·∫≠n/Huy·ªán</label>
                <input
                  type="text"
                  id="district"
                  className="form-input"
                  name="district"
                  value={user.district}
                  onChange={handleChange}
                  placeholder="Nh·∫≠p qu·∫≠n/huy·ªán"
                  required
                />
              </div>
              <div className="form-group">
                <label htmlFor="province">T·ªânh/Th√†nh ph·ªë</label>
                <input
                  type="text"
                  id="province"
                  className="form-input"
                  name="province"
                  value={user.province}
                  onChange={handleChange}
                  placeholder="Nh·∫≠p t·ªânh/th√†nh ph·ªë"
                  required
                />
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="form-actions">
            <button type="submit" className="btn-primary">
              <span>üíæ</span>
              L∆∞u thay ƒë·ªïi
            </button>
            <button type="button" className="btn-secondary" onClick={() => navigate(-1)}>
              <span>‚Ü©Ô∏è</span>
              Quay l·∫°i
            </button>
          </div>
        </form>
      </div>
    </section>
  );
};

export default CustomerProfileUpdate;